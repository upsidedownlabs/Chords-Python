{
	"messages": [
		"Select a compiler to configure for IntelliSense",
		"How would you like to configure IntelliSense for the '{0}' folder?",
		"How would you like to configure IntelliSense for this folder?",
		"Found at {0}",
		"Use {0}",
		"configuration providers",
		"compilers",
		"Select IntelliSense Configuration...",
		"You do not have IntelliSense configured. Unless you set your own configurations, IntelliSense may not be functional.",
		"Use {0}",
		"Use {0}",
		"Select another compiler on my machine...",
		"Help me install a compiler",
		"Install a compiler",
		"Do not configure with a compiler (not recommended)",
		"EPERM: Check permissions for '{0}'",
		"Unable to start the C/C++ language server. IntelliSense features will be disabled. Error: {0}",
		"Unable to start the C/C++ language server. IntelliSense features will be disabled. Error: {0}",
		"The language server crashed. Restarting...",
		"The language server crashed 5 times in the last 3 minutes. It will not be restarted.",
		"{0} has changed to: {1}",
		"Dismiss",
		"Disable Warnings",
		"{0} is unable to provide IntelliSense configuration information for '{1}'. Settings from the '{2}' configuration will be used instead.",
		"The requested configuration name is not found: {0}",
		"Unsupported client",
		"Timed out in {0}ms.",
		"Update IntelliSense time (sec): {0}",
		"Custom configurations received:",
		"Custom browse configuration received: {0}",
		" Declaration/definition was copied.",
		"Name the extracted function",
		"NewFunction",
		"Extract to function failed: {0}",
		"Extract to function failed. An invalid edit was generated: '{0}'"
	],
	"keys": [
		"select.compiler",
		"configure.intelliSense.forFolder",
		"configure.intelliSense.thisFolder",
		"found.string",
		"use.compiler",
		"configuration.providers",
		"compilers",
		"selectIntelliSenseConfiguration.string",
		"setCompiler.message",
		"use.provider",
		"use.compileCommands",
		"selectAnotherCompiler.string",
		"installCompiler.string",
		"installCompiler.string.nix",
		"noConfig.string",
		"check.permissions",
		"unable.to.start",
		"unable.to.start",
		"server.crashed.restart",
		"server.crashed2",
		{
			"key": "loggingLevel.changed",
			"comment": [
				"{0} is the setting name 'loggingLevel', {1} is a string value such as 'Debug'"
			]
		},
		"dismiss.button",
		"disable.warnings.button",
		"unable.to.provide.configuration",
		"config.not.found",
		"unsupported.client",
		"timed.out",
		"update.intellisense.time",
		"configurations.received",
		"browse.configuration.received",
		"fallback.clipboard",
		"handle.extract.name",
		"handle.extract.new.function",
		"handle.extract.error",
		"invalid.edit"
	],
	"filePath": "LanguageServer\\client"
}