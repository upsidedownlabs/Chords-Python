{
    "ClientLoc.ServerRestart.crashMessage": "Pylance 已崩溃。",
    "ClientLoc.ServerRestart.crashRestartingMessage": "Pylance 已崩溃。选择 Node.js 可执行文件来运行 Pylance 时，将重启 Pylance。",
    "ClientLoc.ServerRestart.restartingMessage": "正在使用 Node.js 重启 Pylance...",
    "ClientLoc.ServerRestart.selectButton": "选择",
    "ClientLoc.ServerRestart.selectNodeJsTitle": "选择 Node.js 可执行文件来运行 Pylance",
    "ClientLoc.askNodeSafetyQuestion": "Pylance 配置为使用 {0}运行。是否要使用此可执行文件运行 Pylance?",
    "ClientLoc.autoImportCompletionsStatusItem.name": "Python 自动导入完成模式",
    "ClientLoc.autoImportCompletionsStatusItem.text": "自动导入完成: {0}",
    "ClientLoc.autoImportCompletionsStatusItem.titleOff": "切换到关闭",
    "ClientLoc.autoImportCompletionsStatusItem.titleOn": "切换到开启",
    "ClientLoc.crashTooManyRestarts": "Pylance 在过去 3 分钟内崩溃了 5 次。Pylance 不会重启。有关更多详细信息，请查看[此链接](https://aka.ms/AApf7ox)。",
    "ClientLoc.pylanceAndPythonPrereleaseExtensionMismatch": "Pylance 和 Python 扩展具有不兼容的共享依赖项。\r\n请确保这两个扩展都是最新的预发行版本。",
    "ClientLoc.pylanceAndPythonStableExtensionMismatch": "Pylance 和 Python 扩展具有不兼容的共享依赖项。\r\n请确保这两个扩展都是最新稳定版本。",
    "ClientLoc.typeCheckingModeStatusItem.name": "Python 类型检查模式",
    "ClientLoc.typeCheckingModeStatusItem.pickerPlaceholder": "当前模式: {0}。选择类型检查模式。",
    "ClientLoc.typeCheckingModeStatusItem.pickerSettingsPage": "在“设置”页面上查看",
    "ClientLoc.typeCheckingModeStatusItem.textFormatted": "类型检查: {0}",
    "ClientLoc.typeCheckingModeStatusItem.textFormattedFromConfig": "类型检查： {0}（来自 {1}）",
    "ClientLoc.typeCheckingModeStatusItem.title": "选择类型检查模式",
    "ClientLoc.typeCheckingModeStatusItem.titleConfig": "打开配置",
    "ClientLoc.updateSettingsErrorMsgFormatted": "无法更新设置 '{0}.{1}'。",
    "Common.Help": "帮助",
    "Common.No": "否",
    "Common.Yes": "是",
    "Common.reload": "重新加载",
    "Common.remindMeLater": "稍后提醒我",
    "LanguageServer.settingsMigratedMessage": "适用于 Microsoft Language Server 的设置已复制到 Pylance 设置。有关详细信息，请查看 settings.json 文件。",
    "LanguageServer.settingsMigrationError": "无法迁移以下设置:",
    "LanguageServer.settingsNotOverridable": "使用 pyrightconfig.json 或 pyproject.toml 时，无法设置 '{0}'。",
    "Refactoring.MoveSymbol.newFileDetail": "输入路径或选择目标文件",
    "Refactoring.MoveSymbol.newFileLabel": "输入目标文件路径",
    "Refactoring.MoveSymbol.openDialogOpenLabel": "选择",
    "Refactoring.MoveSymbol.openDialogTitle": "选择新文件以将符号移动到...",
    "Refactoring.MoveSymbol.progressBarTitle": "将符号移动到...",
    "Refactoring.MoveSymbol.quickPickPlaceHolder": "搜索目标文件",
    "Refactoring.MoveSymbol.quickPickTitle": "选择要移动的目标",
    "Refactoring.MoveSymbol.separatorText": "目标文件",
    "Refactoring.SearchImports.quickPickPlaceHolder": "搜索导入项",
    "Refactoring.SearchImports.quickPickTitle": "搜索其他匹配的导入项",
    "commands.pylance.docstrings.fold.title": "Pylance: Fold All Docstrings",
    "commands.pylance.docstrings.unfold.title": "Pylance: Unfold All Docstrings",
    "commands.pylance.gotoOutputChannel.title": "Pylance: 转到输出通道",
    "commands.pylance.indexing.clearPersistedIndices.title": "Pylance: 清除所有持久索引",
    "commands.pylance.logging.start.title": "Pylance: 开始日志记录",
    "commands.pylance.logging.stop.title": "Pylance: 停止日志记录",
    "commands.pylance.profiling.start.title": "Pylance: 开始分析",
    "commands.pylance.profiling.stop.title": "Pylance: 停止分析",
    "commands.pylance.reportIssue.title": "Pylance: 报告问题...",
    "settings.languageServerMode.default.description": "将 Pylance 保留为默认设置。",
    "settings.languageServerMode.description": "为设置选择一组预定义的值。有关详细信息，请检查[此链接](https://aka.ms/languageserver-mode)。",
    "settings.languageServerMode.light.description": "将 Pylance 设置为仅执行必要的工作，以使其轻量化。请参阅说明中的链接，以准确了解设置了哪些设置以及其值。",
    "settings.python.analysis.aiCodeActions.description": "启用/禁用 AI 辅助的代码操作。需要启用 Copilot Chat 扩展。",
    "settings.python.analysis.aiCodeActions.implementAbstractClasses.description": "启用/禁用用于实现继承抽象类的 AI 助手。",
    "settings.python.analysis.autoFormatStrings.description": "在字符串中输入“{” 时，自动使用“f”为字符串的前缀。",
    "settings.python.analysis.autoImportCompletions.description": "启用自动导入补全。",
    "settings.python.analysis.autoIndent.description": "键入 Python 代码时，根据语言语义自动调整缩进。",
    "settings.python.analysis.autoSearchPaths.description": "自动添加常用搜索路径，如“src”。",
    "settings.python.analysis.cacheLSPData.description": "缓存 LSP 数据以加快完成速度。实验性，可能导致 Pylance 停止工作。",
    "settings.python.analysis.completeFunctionParens.description": "将括号添加到函数补全。",
    "settings.python.analysis.completionOverrideExperiment.description": "启用/禁用针对完成重写行为的试验。",
    "settings.python.analysis.diagnosticMode.description": "用于显示诊断的分析范围。",
    "settings.python.analysis.diagnosticSeverityOverrides.description": "允许用户替代单个诊断的严重性级别。将规则名称用作键，并将 \"error\"、\"warning\"、\"information\"、\"none\"、`true` (\"error\" 的别名)或 `false` (\"none\" 的别名)中的一个用作值。当 \"python.analysis.typeCheckingMode\" 设置为 \"off\" 时，每个诊断显示的默认值就是默认值。有关每个类型检查模式的默认值(\"off\"、\"basic\"和\"strict\")，请参阅[此处](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults)。",
    "settings.python.analysis.disableTaggedHints.description": "禁用带有灰显或删除文本的特殊提示的提示诊断。",
    "settings.python.analysis.displayEnglishDiagnostics.description": "无论 VS Code 的显示语言如何，都以英语显示诊断。",
    "settings.python.analysis.enablePytestSupport.description": "在 Pylance 中启用 pytest 支持。",
    "settings.python.analysis.enableSyncServer.description": "使用 sync server 模式 [Experimental]。仅供内部使用，可能会导致 Pylance 停止工作。",
    "settings.python.analysis.exclude.description": "不应包含的目录或文件的路径。这些内容将替代包含目录，从而允许排除特定子目录。请注意，如果排除路径中的文件被未排除的源文件引用（导入），则这些文件仍可能包含在分析中。路径可能包含通配符 ** (一个目录或多个级别的目录)、* (0 个或多个字符的序列)或 ?(单个字符)。如果未指定排除路径，则 Pylance 将自动排除以下内容: `**/node_modules`、`**/__pycache__`、`.git` 和任何虚拟环境目录。如果路径包含 \"${workspaceFolder:<workspaceName>}\" 变量，则 glob 模式将仅应用于多根工作区环境中的相应工作区。",
    "settings.python.analysis.extraCommitChars.description": "允许在适用时使用“.”、“(”作为提交字符。",
    "settings.python.analysis.extraPaths.description": "其他导入搜索解析路径",
    "settings.python.analysis.fixAll.description": "要在全部修复中运行的源修补程序。",
    "settings.python.analysis.gotoDefinitionInStringLiteral.description": "对于类似模块名称的字符串文本，允许转到定义以转到模块。",
    "settings.python.analysis.ignore.description": "应该禁止诊断输出(错误和警告)的目录或文件的路径(即使它们是包含文件或位于包含文件的传递闭包内也禁止)。路径可能包含通配符 ** (一个目录或多个级别的目录)、* (0 个或多个字符的序列)或 ?(单个字符)。如果路径包含 \"${workspaceFolder:<workspaceName>}\" 变量，则 glob 模式将仅应用于多根工作区环境中的相应工作区。",
    "settings.python.analysis.importFormat.description": "为导入模块定义默认格式。",
    "settings.python.analysis.include.description": "应包含的目录或文件的路径。如果未指定路径，则 Pylance 默认使用工作区根目录。路径可能包含通配符 ** (一个目录或多个级别的目录)、* (0 个或多个字符的序列)或 ?(单个字符)。如果路径包含 \"${workspaceFolder:<workspaceName>}\" 变量，则 glob 模式将仅应用于多根工作区环境中的相应工作区。",
    "settings.python.analysis.includeAliasesFromUserFiles.description": "包括用户文件中的别名符号。这会使别名符号在“添加导入”、“自动导入”等功能中显示",
    "settings.python.analysis.indexing.description": "为语言功能的已安装的第三方库和用户文件启用索引，这些功能包括自动导入、添加导入、工作区符号等。",
    "settings.python.analysis.inlayHints.callArgumentNames.description": "启用/禁用调用参数名称的内嵌提示:\r\n```python\r\ndatetime('year='2019, 'month='10, 'day='27)\r\n```\r\n",
    "settings.python.analysis.inlayHints.functionReturnTypes.description": "启用/禁用函数返回类型的内嵌提示:\r\n```python\r\ndef foo(x:int) '-> int':\r\n\treturn x\r\n```\r\n",
    "settings.python.analysis.inlayHints.pytestParameters.description": "启用/禁用 pytest 函数参数类型的嵌入提示:\r\n```python\r\ndef test_foo(my_fixture: 'str'):\r\n\tassert(my_fixture == 'foo')\r\n```\r\n",
    "settings.python.analysis.inlayHints.variableTypes.description": "启用/禁用变量类型的内嵌提示。不显示文本或常量赋值的提示:\r\n```python\r\nfoo':list[str]' = [\"a\"]\r\n \r\n```\r\n",
    "settings.python.analysis.logLevel.description": "指定输出面板的日志记录级别",
    "settings.python.analysis.nodeExecutable.description": "用于运行语言服务器的 Node.js 可执行文件的路径。如果未指定，语言服务器将使用 VS Code 附带的 Node.js 可执行文件。如果遇到 Pylance 内存不足问题，请设置此选项。有关详细信息，请查看[此处](https://aka.ms/AApf7ox)。",
    "settings.python.analysis.packageIndexDepths.description": "用于替代每个包上要编制索引的已安装包下的级别数。默认情况下，仅对顶级模块编制索引(depth = 1)。要为子模块编制索引，请为要编制索引的每个级别的子模块增加 depth 1。已接受的值为:\r\n```JSON\r\n{\"name\": \"package name (str)\",\r\n \"depth\": \"depth to scan (int)\",\r\n \"includeAllSymbols\": \"whether to include all symbols (bool)\"}\r\n\r\n```\r\n如果 `includeAllSymbols` 设置为 `false`，则仅包含每个包的 `__all__` 中的符号。当设置为 `true` 时，Pylance 将为文件中的每个模块/顶级符号声明编制索引。 \r\n \r\n用法示例:\r\n```JSON\r\n[\r\n\t{\"name\": \"sklearn\", \"depth\": 2, \"includeAllSymbols\": true},\r\n\t{\"name\": \"matplotlib\", \"depth\": 3, \"includeAllSymbols\": false}\r\n]\r\n\r\n```\r\n",
    "settings.python.analysis.persistAllIndices.description": "所有第三方库的索引将保留到磁盘。",
    "settings.python.analysis.regenerateStdLibIndices.description": "不依赖所有 Python 版本的共享 stdlib.json 索引，而是为每个工作区的特定 Python 版本和平台生成唯一的索引。与使用预生成的 stdlib 索引不同，此重新生成过程将影响性能。",
    "settings.python.analysis.reportExtraTelemetry.description": "报告额外的遥测 [实验性]。仅供内部使用，可能会导致 Pylance 速度变慢。",
    "settings.python.analysis.stubPath.description": "包含自定义类型存根文件的目录的路径。",
    "settings.python.analysis.supportDocstringTemplate.description": "启用/禁用对 docstring 生成的支持。在空白 docstring，请使用 `Ctrl+空格`生成 docstring。",
    "settings.python.analysis.supportRestructuredText.description": "启用/禁用对 docstrings 中的 reStructuredText 的支持。试验性，可能导致 docstrings 不再呈现。",
    "settings.python.analysis.typeEvaluation.analyzeUnannotatedFunctions.description": "分析并报告没有输入参数或返回类型的类型注释的函数和方法的错误。此设置的默认值为 `true`。",
    "settings.python.analysis.typeEvaluation.deprecateTypingAliases.description": "PEP 585 指出，从 Python 3.9 起，标准集合中仅为支持泛型而引入的类型别名已弃用。此开关控制这些别名是否被视为弃用。这仅适用于 pythonVersion 为 3.9 或更高版本。此设置的默认值为 `false`，但将来可能切换为 `true`。",
    "settings.python.analysis.typeEvaluation.disableBytesTypePromotions.description": "禁用旧行为，其中 `bytearray` 和 `memoryview` 被视为 `bytes` 的子类型。[PEP 688](https://peps.python.org/pep-0688/#no-special-meaning-for-bytes) 弃用了此行为，但提供了此开关以还原旧行为。此设置的默认值为 `false`。",
    "settings.python.analysis.typeEvaluation.enableExperimentalFeatures.description": "启用一组实验性(大部分未记录)功能，这些功能对应于对 Python 键入标准的建议更改或探索性更改。这些功能可能会更改或删除，因此除了试验目的外，不应使用它们。此设置的默认值为 `false`。",
    "settings.python.analysis.typeEvaluation.enableReachabilityAnalysis.description": "如果启用，则使用带标记的提示报告确定无法通过类型分析访问的代码。无论类型分析如何，此设置都不会影响确定无法访问的代码；此类代码始终报告为无法访问。使用 pyright 的命令行版本时，此设置也不起作用，因为它始终不会为无法访问的代码发出带标记的提示。",
    "settings.python.analysis.typeEvaluation.enableTypeIgnoreComments.description": "PEP 484 定义了对 `# type: ignore` 注释的支持。此开关启用或禁用对这些注释的支持。此设置的默认值为 `true`。这不会影响 `# pyright: ignore` 注释。",
    "settings.python.analysis.typeEvaluation.strictDictionaryInference.description": "推断字典键和值的类型时，请使用严格的类型假设。例如，可以推断表达式 `{'a': 1, 'b': 'a'}` 的类型为 `dict[str, Any]` 或 `dict[str, int | str]`。如果此设置为 true，它将使用后者(更严格)类型。此设置的默认值为 `false`。",
    "settings.python.analysis.typeEvaluation.strictListInference.description": "推断 list 的类型时，请使用严格的类型假设。例如，表达式 `[1, 'a', 3.4]` 可以推断为类型为 `list[Any]` 或 `list[int | str | float]`。如果此设置为 true，它将使用后者(更严格)类型。此设置的默认值为 `false`。",
    "settings.python.analysis.typeEvaluation.strictParameterNoneValue.description": "PEP 484 指出，为函数参数分配默认值 None 时，即使其显式类型不是 Optional，其类型也应该隐式为 Optional。启用后，此规则要求参数类型批注在此示例中显式使用 Optional。此设置的默认值为 `true`。",
    "settings.python.analysis.typeEvaluation.strictSetInference.description": "When inferring the type of a set, use strict type assumptions. For example, the expression `{1, 'a', 3.4}` could be inferred to be of type `set[Any]` or `set[int | str | float]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.",
    "settings.python.analysis.typeshedPaths.description": "用于查找 typeshed 模块的路径。",
    "settings.python.analysis.useLibraryCodeForTypes.description": "当类型存根不存在时，使用库实现提取类型信息。",
    "settings.python.analysis.userFileIndexingLimit.description": "要在工作区中编制索引的最大用户文件数。为文件编制索引是一项性能密集型任务。请使用此设置限制要我们编制索引的文件数。如果输入 -1，我们将为所有文件编制索引。",
    "settings.typecheckingMode.basic.description": "\"off\" + \"basic\" 类型检查规则中的所有规则。",
    "settings.typecheckingMode.off.description": "显示无效语法、未解析的导入、未定义变量的诊断。",
    "settings.typecheckingMode.standard.description": "\"basic\" + \"standard\" 类型检查规则中的所有规则。",
    "settings.typecheckingMode.strict.description": "\"standard\" + \"strict\" 类型检查规则中的所有规则。"
}
