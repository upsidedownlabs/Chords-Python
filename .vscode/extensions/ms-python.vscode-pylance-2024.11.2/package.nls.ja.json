{
    "ClientLoc.ServerRestart.crashMessage": "Pylance がクラッシュしました。",
    "ClientLoc.ServerRestart.crashRestartingMessage": "Pylance がクラッシュしました。Node.js 実行可能ファイルを選択して Pylance を実行すると、Pylance は再起動します。",
    "ClientLoc.ServerRestart.restartingMessage": "Node.js を使用して Pylance を再起動しています...",
    "ClientLoc.ServerRestart.selectButton": "選択",
    "ClientLoc.ServerRestart.selectNodeJsTitle": "Node.js 実行可能ファイルを選択して Pylance を実行する",
    "ClientLoc.askNodeSafetyQuestion": "Pylance は {0} で実行するように構成されています。この実行可能ファイルを使用して Pylance を実行しますか?",
    "ClientLoc.autoImportCompletionsStatusItem.name": "Python 自動インポート候補モード",
    "ClientLoc.autoImportCompletionsStatusItem.text": "自動インポート候補: {0}",
    "ClientLoc.autoImportCompletionsStatusItem.titleOff": "オフに切り替える",
    "ClientLoc.autoImportCompletionsStatusItem.titleOn": "オンに切り替える",
    "ClientLoc.crashTooManyRestarts": "過去 3 分間に Pylance が 5 回クラッシュしました。Pylance は再起動されません。詳細については、[このリンク](https://aka.ms/AApf7ox) を確認してください。",
    "ClientLoc.pylanceAndPythonPrereleaseExtensionMismatch": "Pylance および Python の拡張機能に互換性のない共有依存関係があります。\r\n両方の拡張機能が最新のプレリリース バージョンであることを確認してください。",
    "ClientLoc.pylanceAndPythonStableExtensionMismatch": "Pylance および Python の拡張機能に互換性のない共有依存関係があります。\r\n両方の拡張機能が最新の安定バージョンであることを確認してください。",
    "ClientLoc.typeCheckingModeStatusItem.name": "Python 型チェック モード",
    "ClientLoc.typeCheckingModeStatusItem.pickerPlaceholder": "現在のモード: {0}。型チェック モードを選択します。",
    "ClientLoc.typeCheckingModeStatusItem.pickerSettingsPage": "設定ページで表示",
    "ClientLoc.typeCheckingModeStatusItem.textFormatted": "型チェック: {0}",
    "ClientLoc.typeCheckingModeStatusItem.textFormattedFromConfig": "型チェック: {0} ({1} から)",
    "ClientLoc.typeCheckingModeStatusItem.title": "型チェック モードの選択",
    "ClientLoc.typeCheckingModeStatusItem.titleConfig": "構成を開く",
    "ClientLoc.updateSettingsErrorMsgFormatted": "設定 '{0}.{1}' を更新できませんでした。",
    "Common.Help": "ヘルプ",
    "Common.No": "いいえ",
    "Common.Yes": "はい",
    "Common.reload": "再読み込み",
    "Common.remindMeLater": "後で通知する",
    "LanguageServer.settingsMigratedMessage": "Microsoft Language Server に適用される設定が Pylance 設定にコピーされました。詳細については、settings.json ファイルを確認してください。",
    "LanguageServer.settingsMigrationError": "次の設定を移行できませんでした:",
    "LanguageServer.settingsNotOverridable": "pyrightconfig.json または pyproject.toml が使用されている場合は、'{0}' を設定できません。",
    "Refactoring.MoveSymbol.newFileDetail": "パスを入力するか、コピー先ファイルを選択します",
    "Refactoring.MoveSymbol.newFileLabel": "コピー先ファイルのパスを入力してください",
    "Refactoring.MoveSymbol.openDialogOpenLabel": "選択",
    "Refactoring.MoveSymbol.openDialogTitle": "新しいファイルを選択してシンボルを以下に移動します...",
    "Refactoring.MoveSymbol.progressBarTitle": "シンボルを以下に移動...",
    "Refactoring.MoveSymbol.quickPickPlaceHolder": "検索先ファイル",
    "Refactoring.MoveSymbol.quickPickTitle": "移動先の選択",
    "Refactoring.MoveSymbol.separatorText": "移動先ファイル",
    "Refactoring.SearchImports.quickPickPlaceHolder": "インポートを検索する",
    "Refactoring.SearchImports.quickPickTitle": "一致するその他のインポートを検索する",
    "commands.pylance.docstrings.fold.title": "Pylance: すべてのドキュメント文字列を折りたたむ",
    "commands.pylance.docstrings.unfold.title": "Pylance: すべてのドキュメント文字列を展開する",
    "commands.pylance.gotoOutputChannel.title": "Pylance: 出力チャネルに移動",
    "commands.pylance.indexing.clearPersistedIndices.title": "Pylance: 永続化されたすべてのインデックスをクリア",
    "commands.pylance.logging.start.title": "Pylance: ログの開始",
    "commands.pylance.logging.stop.title": "Pylance: ログの停止",
    "commands.pylance.profiling.start.title": "Pylance: プロファイルの開始",
    "commands.pylance.profiling.stop.title": "Pylance: プロファイルの停止",
    "commands.pylance.reportIssue.title": "Pylance: 問題を報告...",
    "settings.languageServerMode.default.description": "Pylance の設定を既定のままにします。",
    "settings.languageServerMode.description": "設定に対して定義済みの値のセットを選択します。詳細については、[このリンク](https://aka.ms/languageserver-mode) を確認してください。",
    "settings.languageServerMode.light.description": "軽量化のため、不可欠な作業のみを実行するように Pylance を設定します。どの設定がどの値に設定されているかを正確に確認するには、説明のリンクを参照してください。",
    "settings.python.analysis.aiCodeActions.description": "AI 支援コード アクションを有効または無効にします。Copilot Chat 拡張機能を有効にする必要があります。",
    "settings.python.analysis.aiCodeActions.implementAbstractClasses.description": "継承された抽象クラスを実装するための AI アシスタンスを有効または無効にします。",
    "settings.python.analysis.autoFormatStrings.description": "文字列に '{' を入力すると、文字列の先頭に 'f' が自動的に付きます。",
    "settings.python.analysis.autoImportCompletions.description": "自動インポートの入力候補を有効にします。",
    "settings.python.analysis.autoIndent.description": "Python コードを入力する際の言語セマンティクスに基づいて、インデントを自動的に調整します。",
    "settings.python.analysis.autoSearchPaths.description": "'src' などの一般的な検索パスを自動的に追加します。",
    "settings.python.analysis.cacheLSPData.description": "LSP データをキャッシュして完了時間を短縮します。試験段階のため、Pylance が動作しなくなる可能性があります。",
    "settings.python.analysis.completeFunctionParens.description": "関数の入力候補にかっこを追加します。",
    "settings.python.analysis.completionOverrideExperiment.description": "完了時の実験のオーバーライド動作を有効または無効にします。",
    "settings.python.analysis.diagnosticMode.description": "診断を表示するための分析スコープ。",
    "settings.python.analysis.diagnosticSeverityOverrides.description": "ユーザーが個々の診断の重大度レベルを上書きできるようにします。ルール名をキーとして使用し、\"error\"、\"warning\"、\"information\"、\"none\"、'true' (\"error\"のエイリアス)、または 'false' (\"none\" のエイリアス) のいずれかを値として使用します。\"python.analysis.typeCheckingMode\" が \"off\" に設定されている場合、各診断に表示される既定値が既定です。各型チェック モード (\"off\"、\"basic\"、\"strict\") の既定値については、[こちら](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults) を参照してください。",
    "settings.python.analysis.disableTaggedHints.description": "灰色表示テキストまたは取り消し線付きテキストの特別なヒントを含むヒント診断を無効にします。",
    "settings.python.analysis.displayEnglishDiagnostics.description": "VS Code の表示言語に関係なく、英語で診断を表示します。",
    "settings.python.analysis.enablePytestSupport.description": "Pylance で pytest のサポートを有効にします。",
    "settings.python.analysis.enableSyncServer.description": "Use sync server mode [Experimental]. For internal use only, may cause Pylance to stop working.",
    "settings.python.analysis.exclude.description": "含めることができないディレクトリまたはファイルのパス。これらは、インクルード ディレクトリをオーバーライドして、特定のサブディレクトリを除外できるようにします。除外パスにあるファイルでも、除外されていないソース ファイルから参照 (インポート) されている場合は、分析に含まれる場合があることに注意してください。パスには、ワイルドカード文字 ** (ディレクトリまたは複数レベルのディレクトリ)、* (0 文字以上のシーケンス)、または ?(1 つの文字) が含まれる場合があります。除外パスが指定されていない場合、Pylance は次のディレクトリを自動的に除外します: `**/node_modules`、`**/__pycache__`、`.git`、仮想環境ディレクトリ。パスに '${workspaceFolder:<workspaceName>}' 変数が含まれている場合、glob パターンはマルチルート ワークスペース環境の対応するワークスペースにのみ適用されます。",
    "settings.python.analysis.extraCommitChars.description": "該当する場合、コミット文字として '.', '(' を使用できます。",
    "settings.python.analysis.extraPaths.description": "検索解決パスの追加のインポート",
    "settings.python.analysis.fixAll.description": "ソース修正プログラムを [すべて修正] で実行します。",
    "settings.python.analysis.gotoDefinitionInStringLiteral.description": "モジュール名のように見える文字列リテラルの場合、[定義へ移動] を有効にするとモジュールに移動します。",
    "settings.python.analysis.ignore.description": "インクルード ファイルまたはインクルード ファイルの推移閉包内であっても、診断出力 (エラーと警告) を抑制する必要があるディレクトリまたはファイルのパス。パスには、ワイルドカード文字 ** (ディレクトリまたは複数レベルのディレクトリ)、* (0 文字以上のシーケンス)、または ?(1 つの文字) が含まれる場合があります。パスに '${workspaceFolder:<workspaceName>}' 変数が含まれている場合、glob パターンはマルチルート ワークスペース環境の対応するワークスペースにのみ適用されます。",
    "settings.python.analysis.importFormat.description": "モジュールをインポートするための既定の形式を定義します。",
    "settings.python.analysis.include.description": "含める必要があるディレクトリまたはファイルのパス。パスが指定されていない場合、ワークスペースのルート ディレクトリに対する Pylance の既定値。パスには、ワイルドカード文字 ** (ディレクトリまたは複数レベルのディレクトリ)、* (0 文字以上のシーケンス)、または ?(1 つの文字) が含まれる場合があります。パスに '${workspaceFolder:<workspaceName>}' 変数が含まれている場合、glob パターンはマルチルート ワークスペース環境の対応するワークスペースにのみ適用されます。",
    "settings.python.analysis.includeAliasesFromUserFiles.description": "ユーザー ファイルのエイリアス シンボルを含めます。これにより、`インポートの追加`、`自動インポート` などの機能に表示されるエイリアス シンボルが作成されます",
    "settings.python.analysis.indexing.description": "自動インポート、インポートの追加、ワークスペース シンボルなど、インストールされている言語機能用のサード パーティ製ライブラリとユーザー ファイルのインデックスを有効にします。",
    "settings.python.analysis.inlayHints.callArgumentNames.description": "呼び出し引数名のインレイ ヒントを有効または無効にする:\r\n```python\r\ndatetime('year='2019, 'month='10, 'day='27)\r\n```\r\n",
    "settings.python.analysis.inlayHints.functionReturnTypes.description": "関数の戻り値の型のインレイ ヒントを有効または無効にする:\r\n```python\r\ndef foo(x:int) '-> int':\r\n\treturn x\r\n```\r\n",
    "settings.python.analysis.inlayHints.pytestParameters.description": "pytest 関数パラメーター型のインレイ ヒントを有効または無効にします:\r\n```python\r\ndef test_foo(my_fixture: 'str'):\r\n\tassert(my_fixture == 'foo')\r\n```\r\n",
    "settings.python.analysis.inlayHints.variableTypes.description": "変数型のインレイ ヒントを有効または無効にします。リテラルまたは定数の代入に対するヒントは表示されません:\r\n```python\r\nfoo':list[str]' = [\"a\"]\r\n \r\n```\r\n",
    "settings.python.analysis.logLevel.description": "出力パネルのログのレベルを指定する",
    "settings.python.analysis.nodeExecutable.description": "言語サーバーの実行に使用する Node.js 実行可能ファイルへのパス。指定しない場合、言語サーバーは VS Code に付属する Node.js 実行可能ファイルを使用します。Pylance でメモリが不足している場合は、このオプションを設定します。詳細については、[こちら](https://aka.ms/AApf7ox) を参照してください。",
    "settings.python.analysis.packageIndexDepths.description": "インストールされたパッケージの下の何階層をパッケージ単位でインデックス付けするかをオーバーライドするために使用します。既定では、最上位レベルのモジュールのみがインデックス付けされます (depth = 1)。サブモジュールにインデックス付けするには、インデックス付けするサブモジュールのレベルごとに depth を 1 つ増やします。使用できる値は次のとおりです:\r\n```JSON\r\n{\"name\": \"package name (str)\",\r\n \"depth\": \"depth to scan (int)\",\r\n \"includeAllSymbols\": \"whether to include all symbols (bool)\"}\r\n\r\n```\r\n`includeAllSymbols` が `false` に設定されている場合、各パッケージの `__all__` のシンボルのみが含まれます。これを `true` に設定すると、Pylance はファイル内のすべてのモジュール/最上位レベルのシンボル宣言にインデックス付けします。\r\n \r\n使用例:\r\n```JSON\r\n[\r\n\t{\"name\": \"sklearn\", \"depth\": 2, \"includeAllSymbols\": true},\r\n\t{\"name\": \"matplotlib\", \"depth\": 3, \"includeAllSymbols\": false}\r\n]\r\n\r\n```\r\n",
    "settings.python.analysis.persistAllIndices.description": "すべてのサード パーティ製ライブラリのインデックスはディスクに永続化されます。",
    "settings.python.analysis.regenerateStdLibIndices.description": "すべての Python バージョンの共有 stdlib.json インデックスに依存する代わりに、各ワークスペースの特定の Python バージョンとプラットフォームに合わせて調整された一意のインデックスを生成します。この再生成プロセスは、事前構築済みの stdlib インデックスの使用とは異なり、パフォーマンスに影響します。",
    "settings.python.analysis.reportExtraTelemetry.description": "追加のテレメトリを報告する [試験段階]。内部使用の場合のみ、Pylance の速度が低下する可能性があります。",
    "settings.python.analysis.stubPath.description": "カスタム型スタブ ファイルを含むディレクトリへのパスです。",
    "settings.python.analysis.supportDocstringTemplate.description": "docstring 生成のサポートを有効または無効にします。空白の docstring では、`Ctrl+Space` を使用して docstring を生成します。",
    "settings.python.analysis.supportRestructuredText.description": "docstrings で reStructuredText のサポートを有効または無効にします。試験段階のため、docstrings がレンダリングされなくなる可能性があります。",
    "settings.python.analysis.typeEvaluation.analyzeUnannotatedFunctions.description": "入力パラメーターまたは戻り値の型に対する型注釈がない関数とメソッドのエラーを分析して報告します。この設定の既定値は `true` です。",
    "settings.python.analysis.typeEvaluation.deprecateTypingAliases.description": "PEP 585 は、ジェネリックのみをサポートするために導入された標準コレクション内の型に対するエイリアスが Python 3.9 の時点で非推奨であることを示します。このスイッチは、これらが非推奨として扱われるかどうかを制御します。これは、pythonVersion が 3.9 以降である場合にのみ適用されます。この設定の既定値は `false` ですが、今後 `true` に切り替わる可能性があります。",
    "settings.python.analysis.typeEvaluation.disableBytesTypePromotions.description": "`bytearray` と `memoryview` が `bytes` のサブタイプであると見なされる従来の動作を無効にします。[PEP 688](https://peps.python.org/pep-0688/#no-special-meaning-for-bytes) ではこの動作が非推奨ですが、このスイッチは古い動作を復元するために提供されています。この設定の既定値は `false` です。",
    "settings.python.analysis.typeEvaluation.enableExperimentalFeatures.description": "Python 入力標準に対する提案済み変更または探索的変更に対応する試験的な (ほとんどはドキュメントに記載されていない) 機能セットを有効にします。これらの機能は変更または削除される可能性があるため、実験目的以外では使用しないでください。この設定の既定値は `false` です。",
    "settings.python.analysis.typeEvaluation.enableReachabilityAnalysis.description": "有効である場合、型分析によって到達できないと判断されたコードは、タグ付きヒントを使用して報告されます。この設定は、型分析に関係なく到達できないと判断されたコードには影響しません。このようなコードは、常に到達不能として報告されます。この設定は、コマンド ライン バージョンの pyright を使用する場合にも影響しません。なぜなら、到達不能のコードに関するタグ付きヒントが生成されないからです。",
    "settings.python.analysis.typeEvaluation.enableTypeIgnoreComments.description": "PEP 484 は、`# type: ignore` コメントのサポートを定義します。このスイッチは、これらのコメントのサポートを有効または無効にします。この設定の既定値は `true` です。これは、`# pyright: ignore` コメントには影響しません。",
    "settings.python.analysis.typeEvaluation.strictDictionaryInference.description": "辞書のキーと値の型を推論する場合、厳密な型の仮定を使用します。たとえば、式 `{'a': 1, 'b': 'a'}` は、型 `dict[str, Any]` または `dict[str, int | str]` であると推論できます。この設定が true である場合、後者の (より厳密な) 型が使用されます。この設定の既定値は `false` です。",
    "settings.python.analysis.typeEvaluation.strictListInference.description": "list の型を推論するときは、厳密な型の仮定を使用します。たとえば、式 `[1, 'a', 3.4]` は `list[Any]` 型または `list[int | str | float]` 型であると推論できます。この設定が true である場合、後者の (より厳密な) 型が使用されます。この設定の既定値は `false` です。",
    "settings.python.analysis.typeEvaluation.strictParameterNoneValue.description": "PEP 484 は、関数パラメーターに既定値 None が割り当てられている場合、明示的な型が Optional でなくても、その型が暗黙的に Optional であることを示します。この規則が有効になっていると、この場合、パラメーター型の注釈で Optional を明示的に使用する必要があります。この設定の既定値は `true` です。",
    "settings.python.analysis.typeEvaluation.strictSetInference.description": "When inferring the type of a set, use strict type assumptions. For example, the expression `{1, 'a', 3.4}` could be inferred to be of type `set[Any]` or `set[int | str | float]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.",
    "settings.python.analysis.typeshedPaths.description": "Paths to look for typeshed modules.",
    "settings.python.analysis.useLibraryCodeForTypes.description": "ライブラリ実装を使用して、型スタブが存在しない場合に型情報を抽出します。",
    "settings.python.analysis.userFileIndexingLimit.description": "ワークスペースでインデックスを作成するユーザー ファイルの最大数。ファイルのインデックス作成は、パフォーマンス集約型のタスクです。この設定を使用して、インデックスを作成するファイルの数を制限してください。-1 を入力すると、すべてのファイルにインデックスが作成されます。",
    "settings.typecheckingMode.basic.description": "\"off\" + \"basic\" 型チェック ルールのすべてのルール。",
    "settings.typecheckingMode.off.description": "無効な構文、未解決のインポート、未定義の変数の診断を表示します。",
    "settings.typecheckingMode.standard.description": "\"basic\" + \"standard\" 型チェック ルールのすべてのルール。",
    "settings.typecheckingMode.strict.description": "\"standard\" + \"strict\" 型チェック ルールのすべてのルール。"
}
